apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
  name: system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: operator
  namespace: system
  labels:
    app: openshift-builds-operator
    control-plane: controller-manager
spec:
  selector:
    matchLabels:
      app: openshift-builds-operator
      control-plane: controller-manager
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        app: openshift-builds-operator
        control-plane: controller-manager
    spec:
      # TODO(user): Uncomment the following code to configure the nodeAffinity expression
      # according to the platforms which are supported by your solution.
      # It is considered best practice to support multiple architectures. You can
      # build your manager image using the makefile target docker-buildx.
      # affinity:
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       nodeSelectorTerms:
      #         - matchExpressions:
      #           - key: kubernetes.io/arch
      #             operator: In
      #             values:
      #               - amd64
      #               - arm64
      #               - ppc64le
      #               - s390x
      #           - key: kubernetes.io/os
      #             operator: In
      #             values:
      #               - linux
      securityContext:
        runAsNonRoot: true
        # TODO(user): For common cases that do not require escalating privileges
        # it is recommended to ensure that all your Pods/Containers are restrictive.
        # More info: https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
        # Please uncomment the following code if your project does NOT have to work on old Kubernetes
        # versions < 1.19 or on vendors versions which do NOT support this field by default (i.e. Openshift < 4.11 ).
        # seccompProfile:
        #   type: RuntimeDefault
      containers:
      - command:
        - /operator
        args:
        - --leader-elect
        image: operator:latest
        imagePullPolicy: Always
        name: operator
        env:
          # TODO: This needs code changes upstream
          # - name: USE_MANAGED_WEBHOOK_CERTS
          #   value: "false"
          - name: PLATFORM
            value: "openshift"
          - name: IMAGE_SHIPWRIGHT_SHIPWRIGHT_BUILD
            value: registry.redhat.io/openshift-builds/openshift-builds-controller-rhel9@sha256:319048059c8f42dbe744007fd6e6ce8ba134221a04d3febf934661c940a08e19
          - name: IMAGE_SHIPWRIGHT_GIT_CONTAINER_IMAGE
            value: registry.redhat.io/openshift-builds/openshift-builds-git-cloner-rhel9@sha256:7053de0da2c2c4f89e017330d2e32012079eefed0d5ba79cc9644a88c2752c1c
          - name: IMAGE_SHIPWRIGHT_IMAGE_PROCESSING_CONTAINER_IMAGE
            value: registry.redhat.io/openshift-builds/openshift-builds-image-processing-rhel9@sha256:b04b0095737120c89e1fbea998ce9b37d39af0652ce05466c83a03057696644b
          - name: IMAGE_SHIPWRIGHT_BUNDLE_CONTAINER_IMAGE
            value: registry.redhat.io/openshift-builds/openshift-builds-image-bundler-rhel9@sha256:b8937059e7c00890c43e5e2781f87189e33886c79cc1ced87f09eb834b5b32ce
          - name: IMAGE_SHIPWRIGHT_WAITER_CONTAINER_IMAGE
            value: registry.redhat.io/openshift-builds/openshift-builds-waiters-rhel9@sha256:23e3f29ae63546db018701abb29b444b9b825fb3a2bda5084542649d9827d4ba
          - name: IMAGE_SHIPWRIGHT_SHIPWRIGHT_BUILD_WEBHOOK
            value: registry.redhat.io/openshift-builds/openshift-builds-webhook-rhel9@sha256:2ee53870d522611d3aa43b5e476247dfc5b1f9b094064ae438e8f8d57ce5d54a
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - "ALL"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        # TODO(user): Configure the resources accordingly based on the project requirements.
        # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
      serviceAccountName: operator
      terminationGracePeriodSeconds: 10
