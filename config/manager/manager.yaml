apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
  name: system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: operator
  namespace: system
  labels:
    app: openshift-builds-operator
    control-plane: controller-manager
spec:
  selector:
    matchLabels:
      app: openshift-builds-operator
      control-plane: controller-manager
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        app: openshift-builds-operator
        control-plane: controller-manager
    spec:
      # TODO(user): Uncomment the following code to configure the nodeAffinity expression
      # according to the platforms which are supported by your solution.
      # It is considered best practice to support multiple architectures. You can
      # build your manager image using the makefile target docker-buildx.
      # affinity:
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       nodeSelectorTerms:
      #         - matchExpressions:
      #           - key: kubernetes.io/arch
      #             operator: In
      #             values:
      #               - amd64
      #               - arm64
      #               - ppc64le
      #               - s390x
      #           - key: kubernetes.io/os
      #             operator: In
      #             values:
      #               - linux
      securityContext:
        runAsNonRoot: true
        # TODO(user): For common cases that do not require escalating privileges
        # it is recommended to ensure that all your Pods/Containers are restrictive.
        # More info: https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
        # Please uncomment the following code if your project does NOT have to work on old Kubernetes
        # versions < 1.19 or on vendors versions which do NOT support this field by default (i.e. Openshift < 4.11 ).
        # seccompProfile:
        #   type: RuntimeDefault
      containers:
      - command:
        - /operator
        args:
        - --leader-elect
        image: operator:latest
        imagePullPolicy: Always
        name: operator
        env:
          # TODO: This needs code changes upstream
          # - name: USE_MANAGED_WEBHOOK_CERTS
          #   value: "false"
          - name: PLATFORM
            value: "openshift"
          - name: IMAGE_SHIPWRIGHT_SHIPWRIGHT_BUILD
            value: quay.io/redhat-user-workloads/rh-openshift-builds-tenant/openshift-builds/openshift-builds-controller@sha256:0054cda756fb647e19cacfcaa60632746b098f066ed4518cec538f5c447eceee
          - name: IMAGE_SHIPWRIGHT_GIT_CONTAINER_IMAGE
            value: quay.io/redhat-user-workloads/rh-openshift-builds-tenant/openshift-builds/openshift-builds-git-cloner@sha256:4f83387ced1c7619ae40cb50cae15047cfaaf070b6ccfd664a9b1f34dc2ebc7d
          - name: IMAGE_SHIPWRIGHT_IMAGE_PROCESSING_CONTAINER_IMAGE
            value: quay.io/redhat-user-workloads/rh-openshift-builds-tenant/openshift-builds/openshift-builds-image-processing@sha256:3a17a41daeaa308796f63f14f8efeb60982b6c3b27bd9adf92dd69ff832851a3
          - name: IMAGE_SHIPWRIGHT_BUNDLE_CONTAINER_IMAGE
            value: quay.io/redhat-user-workloads/rh-openshift-builds-tenant/openshift-builds/openshift-builds-image-bundler@sha256:427c0c750d8058e0d3e6277f2d50a7c032c53ea5debf1a6113c3dc5d91f3059a
          - name: IMAGE_SHIPWRIGHT_WAITER_CONTAINER_IMAGE
            value: quay.io/redhat-user-workloads/rh-openshift-builds-tenant/openshift-builds/openshift-builds-waiter@sha256:e04a0308814b77ce475112b3a2cc569488d005b673c95ba5c0f30ef06f7a59c3
          - name: IMAGE_SHIPWRIGHT_SHP_BUILD_WEBHOOK
            value: quay.io/redhat-user-workloads/rh-openshift-builds-tenant/openshift-builds/openshift-builds-webhook@sha256:3402ebfffa2e40df8547d715c352b1761dafabddb510f20c29bb6804d89ec51e
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - "ALL"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        # TODO(user): Configure the resources accordingly based on the project requirements.
        # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
      serviceAccountName: operator
      terminationGracePeriodSeconds: 10
